# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Count {
  count: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  not: EnumUserRoleFilter
  notIn: [UserRole!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LogOutResponse {
  isAuthenticated: Boolean!
  userId: Float!
}

type Mutation {
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): Count!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): Count!
  createPost(data: PostCreateInput!, select: SelectInput): Post!
  createUser(data: UserCreateInput!, select: SelectInput): User!
  deletePost(select: SelectInput, where: PostWhereUniqueInput!): Post!
  deleteUser(select: SelectInput, where: UserWhereUniqueInput!): User!
  signIn(sessionInput: SessionInput!): SessionResponse!
  signOut(userId: Float!): LogOutResponse!
  signUp(data: UserCreateInput!): SessionResponse!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): Count!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): Count!
  updatePost(data: PostUpdateInput!, select: SelectInput, where: PostWhereUniqueInput!): Post!
  updateUser(data: UserUpdateInput!, select: SelectInput, where: UserWhereUniqueInput!): User!
}

type Post {
  content: String!
  createdAt: DateTime!
  id: ID!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  content: String!
  createdAt: DateTime
  title: String!
  updatedAt: DateTime
}

input PostCreateManyInput {
  content: String!
  createdAt: DateTime
  id: Int
  title: String!
  updatedAt: DateTime
}

input PostOrderByWithRelationInput {
  content: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

enum PostScalarFieldEnum {
  content
  createdAt
  id
  title
  updatedAt
}

input PostUpdateInput {
  content: String
  createdAt: DateTime
  title: String
  updatedAt: DateTime
}

input PostUpdateManyMutationInput {
  content: String
  createdAt: DateTime
  title: String
  updatedAt: DateTime
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  id: Int
  title: StringFilter
  updatedAt: DateTimeFilter
}

type Query {
  currentUser: SessionResponse!
  findAllPosts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], select: SelectInput, skip: Int, take: Int, where: PostWhereInput): [Post!]!
  findAllUsers(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], select: SelectInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], select: SelectInput, skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], select: SelectInput, skip: Int, take: Int, where: UserWhereInput): User
  findOnePost(select: SelectInput, where: PostWhereUniqueInput!): Post
  findOneUser(select: SelectInput, where: UserWhereUniqueInput!): User
}

enum QueryMode {
  default
  insensitive
}

input SelectInput {
  include: JSON
}

input SessionInput {
  email: String!
  password: String!
}

type SessionResponse {
  isAuthenticated: Boolean
  user: User
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String!
  role: UserRole!
  updatedAt: DateTime!
}

input UserCreateInput {
  createdAt: DateTime
  email: String!
  password: String!
  role: UserRole
  updatedAt: DateTime
}

input UserCreateManyInput {
  createdAt: DateTime
  email: String!
  id: Int
  password: String!
  role: UserRole
  updatedAt: DateTime
}

input UserOrderByWithRelationInput {
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  role: SortOrder
  updatedAt: SortOrder
}

enum UserRole {
  ADMIN
  SUPER_ADMIN
  USER
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  password
  role
  updatedAt
}

input UserUpdateInput {
  createdAt: DateTime
  email: String
  password: String
  role: UserRole
  updatedAt: DateTime
}

input UserUpdateManyMutationInput {
  createdAt: DateTime
  email: String
  password: String
  role: UserRole
  updatedAt: DateTime
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  id: IntFilter
  password: StringFilter
  role: EnumUserRoleFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: String
  id: Int
  password: StringFilter
  role: EnumUserRoleFilter
  updatedAt: DateTimeFilter
}