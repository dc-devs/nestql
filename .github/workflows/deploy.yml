name: Deploy to AWS ECS

on:
    push:
        branches: [main]

jobs:
    deploy:
        runs-on: ubuntu-latest
        if: false # Temporarily disable this workflow
        env:
            AWS_REGION: us-east-1
            ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
            ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
            ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
            CONTAINER_NAME: nestql
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Log in to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2

            - name: Build and push Docker image
              run: |
                  docker build -t $ECR_REPOSITORY:latest .
                  docker push $ECR_REPOSITORY:latest

            - name: Download ECS task definition
              run: |
                  aws ecs describe-task-definition --task-definition $ECS_SERVICE \
                    --query taskDefinition > task-definition.json

            - name: Update image in ECS task definition
              run: |
                  jq --arg IMAGE "$ECR_REPOSITORY:latest" '.containerDefinitions[0].image = $IMAGE' task-definition.json > new-task-def.json

            - name: Register new ECS task definition
              id: register-task-def
              run: |
                  aws ecs register-task-definition --cli-input-json file://new-task-def.json > task-def-out.json
                  echo "TASK_DEF_ARN=$(jq -r .taskDefinition.taskDefinitionArn task-def-out.json)" >> $GITHUB_ENV

            - name: Update ECS service
              run: |
                  aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $TASK_DEF_ARN

            # Optional: Run Prisma migrations (if needed)
            # - name: Run migrations
            #   run: |
            #     docker run --rm \
            #       -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            #       $ECR_REPOSITORY:latest bunx prisma migrate deploy
