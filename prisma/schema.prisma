// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
	provider = "prisma-client-js"
	binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

generator nestgraphql {
	provider = "node node_modules/prisma-nestjs-graphql"
	output = "../src/app/models/common/@generated"
	fields_Validator_from = "class-validator"
	fields_Validator_input = true
	noAtomicOperations = true
	purgeOutput = true
}

generator nestgraphql_bun_support {
	provider = "node src/base/services/prisma/generators/nestgraphql-add-bun-support"
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

enum UserRole {
	USER
	ADMIN
	SUPER_ADMIN
}

model User {
	id						Int				@default(autoincrement()) @id
	/// @Validator.IsEmail()
	email					String			@unique
	/// @Validator.IsString()
	/// @Validator.MinLength(8)
	password				String
	role					UserRole		@default(USER)
	
	createdAt				DateTime		@default(now())
	updatedAt				DateTime		@updatedAt

	chatSessions			ChatSession[]

	@@index([id, email])
}

model ChatSession {
	id					Int					@default(autoincrement()) @id
	title				String
	createdAt			DateTime			@default(now())
	updatedAt			DateTime			@updatedAt
	
	userId				Int					
	user				User				@relation(fields: [userId], references: [id])
	
	messages			Message[]

	@@index([id, userId])
}

model Message {
	id					Int					@default(autoincrement()) @id
	sender				String				// 'user' or 'agent'
	type				String				@default("text") // 'text', 'tool_call', 'tool_result', etc.
	content				String?
	payload				Json?
	timestamp			DateTime			@default(now())
	createdAt			DateTime			@default(now())
	updatedAt			DateTime			@updatedAt
	
	chatSessionId		Int
	chatSession			ChatSession			@relation(fields: [chatSessionId], references: [id])

	@@index([id, chatSessionId])
}
